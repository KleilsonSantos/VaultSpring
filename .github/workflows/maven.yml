name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Steps for GitHub Actions
      - name: üì• Checkout source code
        uses: actions/checkout@v4

      # Steps Set up JDK 17
      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # Steps for ACT local environment
      - name: üõ†Ô∏è Install Maven (for local act usage)
        if: env.ACT
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      # Steps for local act usage
      - name: üß© Create Maven cache directory (required for act local)
        if: env.ACT
        run: mkdir -p /root/.m2/repository

      # Step Cache Maven apenas no GitHub Actions
      - name: üíæ Manual Maven cache
        if: ${{ !env.ACT }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            target
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      # Step Code style analysis
      - name: üßπ Code analysis with Checkstyle
        run: mvn checkstyle:check

      # Step Build, tests, and coverage report generation
      - name: üß™ Build + Test + Coverage (JaCoCo)
        run: mvn clean verify jacoco:report --no-transfer-progress

      # Step Optional upload of JaCoCo coverage report (only on GitHub Actions)
      - name: üì§ Upload JaCoCo coverage report
        if: success() && !env.ACT && hashFiles('target/site/jacoco/jacoco.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      # Step Submit dependency graph
      - name: üìä Submit dependency graph
        if: ${{ !env.ACT && env.GITHUB_TOKEN != '' }}
        uses: advanced-security/maven-dependency-submission-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step Run Sonar Scanner ‚Äî runs both on GitHub Actions and local act
      - name: üîç Run Sonar Scanner (GitHub Actions)
        if: success() && !env.ACT
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "Running Sonar analysis..."
          mvn sonar:sonar \
            -Dsonar.projectKey=VaultSpring \
            -Dsonar.organization=kleilsonsantos \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # Step Run Sonar Scanner ‚Äî runs both on local act
      - name: üîç Run Sonar Scanner (ACT local)
        if: success() && env.ACT
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        run: |
          echo "Running Sonar analysis..."
          mvn sonar:sonar \
            -Dsonar.projectKey=vaultspring \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # Step Upload the generated JAR artifact (only on GitHub Actions)
      - name: üì¶ Upload generated JAR
        if: success() && !env.ACT && hashFiles('target/*.jar') != ''
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: target/*.jar

      # Step Send coverage report to Codecov (only on GitHub Actions)
      - name: üìà Send report to Codecov
        if: success() && !env.ACT && hashFiles('target/site/jacoco/jacoco.xml') != ''
        uses: codecov/codecov-action@v4
        with:
          files: target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-coverage
          fail_ci_if_error: false
